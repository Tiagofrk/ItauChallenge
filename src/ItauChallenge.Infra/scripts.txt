-- Tabela de Usuários
CREATE TABLE IF NOT EXISTS usr (
    usr_id INT AUTO_INCREMENT PRIMARY KEY, -- INT é suficiente para um ID, AUTO_INCREMENT para simplicidade.
    usr_name VARCHAR(255) NOT NULL,       -- VARCHAR para nomes de tamanho variável.
    usr_email VARCHAR(255) NOT NULL UNIQUE, -- UNIQUE para garantir que não haja emails duplicados.
    usr_brokerage_pct DECIMAL(5, 4) NOT NULL -- DECIMAL é o tipo correto para valores monetários/percentuais para evitar erros de ponto flutuante. (5,4) permite valores como 0.1234 (12,34%).
);

-- Tabela de Ativos
CREATE TABLE IF NOT EXISTS ast (
    ast_id INT AUTO_INCREMENT PRIMARY KEY,
    ast_code VARCHAR(10) NOT NULL UNIQUE,  -- Códigos de ativo (ex: ITSA4, KDIF11) são curtos e alfanuméricos. UNIQUE para não repetir ativos.
    ast_name VARCHAR(255) NOT NULL        -- Nome completo do ativo.
);

-- Tabela de Operações
CREATE TABLE IF NOT EXISTS op (
    op_id BIGINT AUTO_INCREMENT PRIMARY KEY,          -- BIGINT para suportar um grande volume de operações (1 milhão/dia).
    op_usr_id INT NOT NULL,                           -- Chave estrangeira para a tabela de usuários.
    op_ast_id INT NOT NULL,                           -- Chave estrangeira para a tabela de ativos.
    op_quantity INT NOT NULL,                         -- Quantidade de ativos na operação.
    op_unit_price DECIMAL(18, 8) NOT NULL,            -- Preço com alta precisão, comum em mercado financeiro.
    op_operation_type ENUM('Compra', 'Venda') NOT NULL, -- ENUM para restringir os valores a 'Compra' ou 'Venda'.
    op_brokerage DECIMAL(10, 2) NOT NULL,             -- Valor da corretagem, tipo DECIMAL para precisão monetária.
    op_dth DATETIME(6) NOT NULL,                      -- DATETIME(6) para registrar data e hora com precisão de microssegundos, importante para cotações.
    FOREIGN KEY (op_usr_id) REFERENCES usr(usr_id),
    FOREIGN KEY (op_ast_id) REFERENCES ast(ast_id)
);

-- Tabela de Cotações
CREATE TABLE IF NOT EXISTS qtt (
    qtt_id BIGINT AUTO_INCREMENT PRIMARY KEY,          -- BIGINT para o alto volume de cotações.
    qtt_ast_id INT NOT NULL,
    qtt_unit_price DECIMAL(18, 8) NOT NULL,           -- Alta precisão para o preço.
    qtt_dth DATETIME(6) NOT NULL,                     -- Precisão de microssegundos é crucial aqui.
    FOREIGN KEY (qtt_ast_id) REFERENCES ast(ast_id)
);

-- Tabela de Posição do Cliente
CREATE TABLE IF NOT EXISTS pos (
    pos_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    pos_usr_id INT NOT NULL,
    pos_ast_id INT NOT NULL,
    pos_quantity INT NOT NULL,
    pos_avg_price DECIMAL(18, 8) NOT NULL,           -- Preço médio precisa da mesma precisão dos preços de operação/cotação.
    pos_pl DECIMAL(18, 2) NOT NULL,                  -- P&L (Profit & Loss) é um valor financeiro.
    UNIQUE (pos_usr_id, pos_ast_id),                 -- Garante que um usuário só tenha uma linha de posição por ativo.
    FOREIGN KEY (pos_usr_id) REFERENCES usr(usr_id),
    FOREIGN KEY (pos_ast_id) REFERENCES ast(ast_id)
);


-- criação do index
CREATE INDEX IF NOT EXISTS idx_op_usr_ast_dth ON op (op_usr_id, op_ast_id, op_dth DESC);

-- SQL para ser executado (lógica conceitual)
-- UPDATE pos p
-- SET p.pos_pl = (p.pos_quantity * ? -- (novo_preco_cotacao) ) - (p.pos_quantity * p.pos_avg_price)
-- WHERE p.pos_ast_id = ? -- (ID do ativo da nova cotação)
